// @generated by protoc-gen-es v2.6.1
// @generated from file indexerservice.proto (package land.gno.dsocial.indexerservice.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file indexerservice.proto.
 */
export declare const file_indexerservice: GenFile;

/**
 * @generated from message land.gno.dsocial.indexerservice.v1.GetHomePostsRequest
 */
export declare type GetHomePostsRequest = Message<"land.gno.dsocial.indexerservice.v1.GetHomePostsRequest"> & {
  /**
   * @generated from field: string userPostAddr = 1;
   */
  userPostAddr: string;

  /**
   * @generated from field: uint64 startIndex = 2;
   */
  startIndex: bigint;

  /**
   * @generated from field: uint64 endIndex = 3;
   */
  endIndex: bigint;
};

/**
 * Describes the message land.gno.dsocial.indexerservice.v1.GetHomePostsRequest.
 * Use `create(GetHomePostsRequestSchema)` to create a new message.
 */
export declare const GetHomePostsRequestSchema: GenMessage<GetHomePostsRequest>;

/**
 * @generated from message land.gno.dsocial.indexerservice.v1.UserAndPostID
 */
export declare type UserAndPostID = Message<"land.gno.dsocial.indexerservice.v1.UserAndPostID"> & {
  /**
   * @generated from field: string userPostAddr = 1;
   */
  userPostAddr: string;

  /**
   * @generated from field: uint64 postID = 2;
   */
  postID: bigint;
};

/**
 * Describes the message land.gno.dsocial.indexerservice.v1.UserAndPostID.
 * Use `create(UserAndPostIDSchema)` to create a new message.
 */
export declare const UserAndPostIDSchema: GenMessage<UserAndPostID>;

/**
 * @generated from message land.gno.dsocial.indexerservice.v1.GetHomePostsResponse
 */
export declare type GetHomePostsResponse = Message<"land.gno.dsocial.indexerservice.v1.GetHomePostsResponse"> & {
  /**
   * @generated from field: uint64 nPosts = 1;
   */
  nPosts: bigint;

  /**
   * @generated from field: repeated land.gno.dsocial.indexerservice.v1.UserAndPostID homePosts = 2;
   */
  homePosts: UserAndPostID[];
};

/**
 * Describes the message land.gno.dsocial.indexerservice.v1.GetHomePostsResponse.
 * Use `create(GetHomePostsResponseSchema)` to create a new message.
 */
export declare const GetHomePostsResponseSchema: GenMessage<GetHomePostsResponse>;

/**
 * @generated from message land.gno.dsocial.indexerservice.v1.StreamPostReplyRequest
 */
export declare type StreamPostReplyRequest = Message<"land.gno.dsocial.indexerservice.v1.StreamPostReplyRequest"> & {
};

/**
 * Describes the message land.gno.dsocial.indexerservice.v1.StreamPostReplyRequest.
 * Use `create(StreamPostReplyRequestSchema)` to create a new message.
 */
export declare const StreamPostReplyRequestSchema: GenMessage<StreamPostReplyRequest>;

/**
 * @generated from message land.gno.dsocial.indexerservice.v1.StreamPostReplyResponse
 */
export declare type StreamPostReplyResponse = Message<"land.gno.dsocial.indexerservice.v1.StreamPostReplyResponse"> & {
  /**
   * @generated from field: string userReplyAddr = 1;
   */
  userReplyAddr: string;

  /**
   * @generated from field: string userPostAddr = 2;
   */
  userPostAddr: string;

  /**
   * @generated from field: string threadID = 3;
   */
  threadID: string;

  /**
   * @generated from field: string postID = 4;
   */
  postID: string;

  /**
   * @generated from field: string message = 5;
   */
  message: string;

  /**
   * @generated from field: string newPostID = 6;
   */
  newPostID: string;
};

/**
 * Describes the message land.gno.dsocial.indexerservice.v1.StreamPostReplyResponse.
 * Use `create(StreamPostReplyResponseSchema)` to create a new message.
 */
export declare const StreamPostReplyResponseSchema: GenMessage<StreamPostReplyResponse>;

/**
 * @generated from message land.gno.dsocial.indexerservice.v1.HelloRequest
 */
export declare type HelloRequest = Message<"land.gno.dsocial.indexerservice.v1.HelloRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message land.gno.dsocial.indexerservice.v1.HelloRequest.
 * Use `create(HelloRequestSchema)` to create a new message.
 */
export declare const HelloRequestSchema: GenMessage<HelloRequest>;

/**
 * @generated from message land.gno.dsocial.indexerservice.v1.HelloResponse
 */
export declare type HelloResponse = Message<"land.gno.dsocial.indexerservice.v1.HelloResponse"> & {
  /**
   * @generated from field: string greeting = 1;
   */
  greeting: string;
};

/**
 * Describes the message land.gno.dsocial.indexerservice.v1.HelloResponse.
 * Use `create(HelloResponseSchema)` to create a new message.
 */
export declare const HelloResponseSchema: GenMessage<HelloResponse>;

/**
 * @generated from message land.gno.dsocial.indexerservice.v1.HelloStreamRequest
 */
export declare type HelloStreamRequest = Message<"land.gno.dsocial.indexerservice.v1.HelloStreamRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message land.gno.dsocial.indexerservice.v1.HelloStreamRequest.
 * Use `create(HelloStreamRequestSchema)` to create a new message.
 */
export declare const HelloStreamRequestSchema: GenMessage<HelloStreamRequest>;

/**
 * @generated from message land.gno.dsocial.indexerservice.v1.HelloStreamResponse
 */
export declare type HelloStreamResponse = Message<"land.gno.dsocial.indexerservice.v1.HelloStreamResponse"> & {
  /**
   * @generated from field: string greeting = 1;
   */
  greeting: string;
};

/**
 * Describes the message land.gno.dsocial.indexerservice.v1.HelloStreamResponse.
 * Use `create(HelloStreamResponseSchema)` to create a new message.
 */
export declare const HelloStreamResponseSchema: GenMessage<HelloStreamResponse>;

/**
 * @generated from message land.gno.dsocial.indexerservice.v1.ErrDetails
 */
export declare type ErrDetails = Message<"land.gno.dsocial.indexerservice.v1.ErrDetails"> & {
  /**
   * @generated from field: repeated land.gno.dsocial.indexerservice.v1.ErrCode codes = 1;
   */
  codes: ErrCode[];
};

/**
 * Describes the message land.gno.dsocial.indexerservice.v1.ErrDetails.
 * Use `create(ErrDetailsSchema)` to create a new message.
 */
export declare const ErrDetailsSchema: GenMessage<ErrDetails>;

/**
 * The ErrCode enum defines errors for gRPC API functions. These are converted
 * from the Go error types returned by gnoclient.
 *
 * ----------------
 * Special errors
 * ----------------
 *
 * @generated from enum land.gno.dsocial.indexerservice.v1.ErrCode
 */
export enum ErrCode {
  /**
   * Undefined is the default value. It should never be set manually
   *
   * @generated from enum value: Undefined = 0;
   */
  Undefined = 0,

  /**
   * TODO indicates that you plan to create an error later
   *
   * @generated from enum value: TODO = 1;
   */
  TODO = 1,

  /**
   * ErrNotImplemented indicates that a method is not implemented yet
   *
   * @generated from enum value: ErrNotImplemented = 2;
   */
  ErrNotImplemented = 2,

  /**
   * ErrInternal indicates an unknown error (without Code), i.e. in gRPC
   *
   * @generated from enum value: ErrInternal = 3;
   */
  ErrInternal = 3,

  /**
   * @generated from enum value: ErrInvalidInput = 100;
   */
  ErrInvalidInput = 100,

  /**
   * @generated from enum value: ErrMissingInput = 101;
   */
  ErrMissingInput = 101,

  /**
   * @generated from enum value: ErrSerialization = 102;
   */
  ErrSerialization = 102,

  /**
   * @generated from enum value: ErrDeserialization = 103;
   */
  ErrDeserialization = 103,

  /**
   * @generated from enum value: ErrInitService = 104;
   */
  ErrInitService = 104,

  /**
   * @generated from enum value: ErrRunGRPCServer = 105;
   */
  ErrRunGRPCServer = 105,
}

/**
 * Describes the enum land.gno.dsocial.indexerservice.v1.ErrCode.
 */
export declare const ErrCodeSchema: GenEnum<ErrCode>;

/**
 * IndexerService is the service to interact with the dSocial Indexer
 *
 * @generated from service land.gno.dsocial.indexerservice.v1.IndexerService
 */
export declare const IndexerService: GenService<{
  /**
   * @generated from rpc land.gno.dsocial.indexerservice.v1.IndexerService.GetHomePosts
   */
  getHomePosts: {
    methodKind: "unary";
    input: typeof GetHomePostsRequestSchema;
    output: typeof GetHomePostsResponseSchema;
  },
  /**
   * StreamPostReply returns a stream of PostReply functions that are called in the blockchain
   *
   * @generated from rpc land.gno.dsocial.indexerservice.v1.IndexerService.StreamPostReply
   */
  streamPostReply: {
    methodKind: "server_streaming";
    input: typeof StreamPostReplyRequestSchema;
    output: typeof StreamPostReplyResponseSchema;
  },
  /**
   * Hello is for debug purposes
   *
   * @generated from rpc land.gno.dsocial.indexerservice.v1.IndexerService.Hello
   */
  hello: {
    methodKind: "unary";
    input: typeof HelloRequestSchema;
    output: typeof HelloResponseSchema;
  },
  /**
   * HelloStream is for debug purposes
   *
   * @generated from rpc land.gno.dsocial.indexerservice.v1.IndexerService.HelloStream
   */
  helloStream: {
    methodKind: "server_streaming";
    input: typeof HelloStreamRequestSchema;
    output: typeof HelloStreamResponseSchema;
  },
}>;


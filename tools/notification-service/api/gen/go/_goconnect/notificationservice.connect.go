// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: notificationservice.proto

package _goconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	_go "github.com/gnoverse/dsocial/tools/notification-service/api/gen/go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NotificationServiceName is the fully-qualified name of the NotificationService service.
	NotificationServiceName = "land.gno.dsocial.notificationservice.v1.NotificationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotificationServiceRegisterDeviceProcedure is the fully-qualified name of the
	// NotificationService's RegisterDevice RPC.
	NotificationServiceRegisterDeviceProcedure = "/land.gno.dsocial.notificationservice.v1.NotificationService/RegisterDevice"
	// NotificationServiceHelloProcedure is the fully-qualified name of the NotificationService's Hello
	// RPC.
	NotificationServiceHelloProcedure = "/land.gno.dsocial.notificationservice.v1.NotificationService/Hello"
	// NotificationServiceHelloStreamProcedure is the fully-qualified name of the NotificationService's
	// HelloStream RPC.
	NotificationServiceHelloStreamProcedure = "/land.gno.dsocial.notificationservice.v1.NotificationService/HelloStream"
)

// NotificationServiceClient is a client for the
// land.gno.dsocial.notificationservice.v1.NotificationService service.
type NotificationServiceClient interface {
	RegisterDevice(context.Context, *connect.Request[_go.RegisterDeviceRequest]) (*connect.Response[_go.RegisterDeviceResponse], error)
	// Hello is for debug purposes
	Hello(context.Context, *connect.Request[_go.HelloRequest]) (*connect.Response[_go.HelloResponse], error)
	// HelloStream is for debug purposes
	HelloStream(context.Context, *connect.Request[_go.HelloStreamRequest]) (*connect.ServerStreamForClient[_go.HelloStreamResponse], error)
}

// NewNotificationServiceClient constructs a client for the
// land.gno.dsocial.notificationservice.v1.NotificationService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotificationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	notificationServiceMethods := _go.File_notificationservice_proto.Services().ByName("NotificationService").Methods()
	return &notificationServiceClient{
		registerDevice: connect.NewClient[_go.RegisterDeviceRequest, _go.RegisterDeviceResponse](
			httpClient,
			baseURL+NotificationServiceRegisterDeviceProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("RegisterDevice")),
			connect.WithClientOptions(opts...),
		),
		hello: connect.NewClient[_go.HelloRequest, _go.HelloResponse](
			httpClient,
			baseURL+NotificationServiceHelloProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("Hello")),
			connect.WithClientOptions(opts...),
		),
		helloStream: connect.NewClient[_go.HelloStreamRequest, _go.HelloStreamResponse](
			httpClient,
			baseURL+NotificationServiceHelloStreamProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("HelloStream")),
			connect.WithClientOptions(opts...),
		),
	}
}

// notificationServiceClient implements NotificationServiceClient.
type notificationServiceClient struct {
	registerDevice *connect.Client[_go.RegisterDeviceRequest, _go.RegisterDeviceResponse]
	hello          *connect.Client[_go.HelloRequest, _go.HelloResponse]
	helloStream    *connect.Client[_go.HelloStreamRequest, _go.HelloStreamResponse]
}

// RegisterDevice calls land.gno.dsocial.notificationservice.v1.NotificationService.RegisterDevice.
func (c *notificationServiceClient) RegisterDevice(ctx context.Context, req *connect.Request[_go.RegisterDeviceRequest]) (*connect.Response[_go.RegisterDeviceResponse], error) {
	return c.registerDevice.CallUnary(ctx, req)
}

// Hello calls land.gno.dsocial.notificationservice.v1.NotificationService.Hello.
func (c *notificationServiceClient) Hello(ctx context.Context, req *connect.Request[_go.HelloRequest]) (*connect.Response[_go.HelloResponse], error) {
	return c.hello.CallUnary(ctx, req)
}

// HelloStream calls land.gno.dsocial.notificationservice.v1.NotificationService.HelloStream.
func (c *notificationServiceClient) HelloStream(ctx context.Context, req *connect.Request[_go.HelloStreamRequest]) (*connect.ServerStreamForClient[_go.HelloStreamResponse], error) {
	return c.helloStream.CallServerStream(ctx, req)
}

// NotificationServiceHandler is an implementation of the
// land.gno.dsocial.notificationservice.v1.NotificationService service.
type NotificationServiceHandler interface {
	RegisterDevice(context.Context, *connect.Request[_go.RegisterDeviceRequest]) (*connect.Response[_go.RegisterDeviceResponse], error)
	// Hello is for debug purposes
	Hello(context.Context, *connect.Request[_go.HelloRequest]) (*connect.Response[_go.HelloResponse], error)
	// HelloStream is for debug purposes
	HelloStream(context.Context, *connect.Request[_go.HelloStreamRequest], *connect.ServerStream[_go.HelloStreamResponse]) error
}

// NewNotificationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationServiceHandler(svc NotificationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	notificationServiceMethods := _go.File_notificationservice_proto.Services().ByName("NotificationService").Methods()
	notificationServiceRegisterDeviceHandler := connect.NewUnaryHandler(
		NotificationServiceRegisterDeviceProcedure,
		svc.RegisterDevice,
		connect.WithSchema(notificationServiceMethods.ByName("RegisterDevice")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceHelloHandler := connect.NewUnaryHandler(
		NotificationServiceHelloProcedure,
		svc.Hello,
		connect.WithSchema(notificationServiceMethods.ByName("Hello")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceHelloStreamHandler := connect.NewServerStreamHandler(
		NotificationServiceHelloStreamProcedure,
		svc.HelloStream,
		connect.WithSchema(notificationServiceMethods.ByName("HelloStream")),
		connect.WithHandlerOptions(opts...),
	)
	return "/land.gno.dsocial.notificationservice.v1.NotificationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotificationServiceRegisterDeviceProcedure:
			notificationServiceRegisterDeviceHandler.ServeHTTP(w, r)
		case NotificationServiceHelloProcedure:
			notificationServiceHelloHandler.ServeHTTP(w, r)
		case NotificationServiceHelloStreamProcedure:
			notificationServiceHelloStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotificationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationServiceHandler struct{}

func (UnimplementedNotificationServiceHandler) RegisterDevice(context.Context, *connect.Request[_go.RegisterDeviceRequest]) (*connect.Response[_go.RegisterDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.dsocial.notificationservice.v1.NotificationService.RegisterDevice is not implemented"))
}

func (UnimplementedNotificationServiceHandler) Hello(context.Context, *connect.Request[_go.HelloRequest]) (*connect.Response[_go.HelloResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.dsocial.notificationservice.v1.NotificationService.Hello is not implemented"))
}

func (UnimplementedNotificationServiceHandler) HelloStream(context.Context, *connect.Request[_go.HelloStreamRequest], *connect.ServerStream[_go.HelloStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.dsocial.notificationservice.v1.NotificationService.HelloStream is not implemented"))
}
